{"remainingRequest":"C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\src\\views\\dictionary\\DetailDevice.vue?vue&type=template&id=46030dd6&","dependencies":[{"path":"C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\src\\views\\dictionary\\DetailDevice.vue","mtime":1623400328783},{"path":"C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623394347614},{"path":"C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1623394373608},{"path":"C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623394347614},{"path":"C:\\Users\\ndtin\\Desktop\\ndtin\\MISA.HCSN\\node_modules\\vue-loader\\lib\\index.js","mtime":1623394373604}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}